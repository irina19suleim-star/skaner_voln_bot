# app.py
# Telegram-–±–æ—Ç –Ω–∞ Flask + –≤–µ–±—Ö—É–∫ –¥–ª—è Render
# –†–∞–±–æ—Ç–∞–µ—Ç —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è:
#   BOT_TOKEN            ‚Äî —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –æ—Ç @BotFather (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
#   PUBLIC_URL (–æ–ø—Ü.)    ‚Äî –ø—É–±–ª–∏—á–Ω—ã–π URL —Å–µ—Ä–≤–∏—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä https://skaner-voln-bot.onrender.com)
# Render –æ–±—ã—á–Ω–æ —Å–∞–º –¥–∞—ë—Ç RENDER_EXTERNAL_URL ‚Äî –º—ã —Ç–æ–∂–µ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º.

import os
from flask import Flask, request
import telebot

# === 1) –ö–æ–Ω—Ñ–∏–≥ ===
TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    raise RuntimeError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞")

# –ü—ã—Ç–∞–µ–º—Å—è –≤–∑—è—Ç—å –ø—É–±–ª–∏—á–Ω—ã–π URL –∏–∑ PUBLIC_URL –∏–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º–Ω–æ–π RENDER_EXTERNAL_URL
PUBLIC_URL = os.getenv("PUBLIC_URL") or os.getenv("RENDER_EXTERNAL_URL")

bot = telebot.TeleBot(TOKEN, parse_mode="HTML")
app = Flask(__name__)

# === 2) –•—ç–Ω–¥–ª–µ—Ä—ã –±–æ—Ç–∞ ===
@bot.message_handler(commands=["start"])
def handle_start(message):
    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! –Ø –°–∫–∞–Ω–µ—Ä –î—É—à–∏ üåä‚ú®\n–ù–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å ‚Äî —è –æ—Ç–≤–µ—á—É."
    )

@bot.message_handler(func=lambda m: True)
def handle_echo(message):
    bot.send_message(message.chat.id, f"–¢—ã –Ω–∞–ø–∏—Å–∞–ª(–∞): <b>{message.text}</b>")

# === 3) –í–µ–±—Ö—É–∫ ===
@app.route("/webhook", methods=["POST"])
def telegram_webhook():
    try:
        data = request.get_data().decode("utf-8")
        update = telebot.types.Update.de_json(data)
        bot.process_new_updates([update])
        return "ok", 200
    except Exception as e:
        # –í –ª–æ–≥–∞—Ö Render —É–≤–∏–¥–∏—à—å –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ–π–¥—ë—Ç –Ω–µ —Ç–∞–∫
        print("WEBHOOK ERROR:", repr(e))
        return "error", 500

# –ü—Ä–æ—Å—Ç–æ–π –ø–∏–Ω–≥, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å, —á—Ç–æ —Å–µ—Ä–≤–∏—Å –∂–∏–≤
@app.route("/", methods=["GET"])
def root():
    return "Bot is running üèÑ", 200

# === 4) –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ (–µ—Å–ª–∏ –∑–Ω–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL) ===
def ensure_webhook():
    try:
        if not PUBLIC_URL:
            print("PUBLIC_URL/RENDER_EXTERNAL_URL –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –≤–µ–±—Ö—É–∫ –Ω–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º.")
            return
        url = PUBLIC_URL.rstrip("/") + "/webhook"
        current = bot.get_webhook_info().url
        if current != url:
            bot.remove_webhook()
            bot.set_webhook(url=url, max_connections=40)
            print(f"Webhook set to: {url}")
        else:
            print(f"Webhook already set: {url}")
    except Exception as e:
        print("SET WEBHOOK ERROR:", repr(e))

# === 5) –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ===
if __name__ == "__main__":
    ensure_webhook()
    port = int(os.getenv("PORT", "10000"))  # Render —Å–ª—É—à–∞–µ—Ç —ç—Ç–æ—Ç –ø–æ—Ä—Ç
    app.run(host="0.0.0.0", port=port)
