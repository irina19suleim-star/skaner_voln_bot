import os
import threading
from flask import Flask

from telegram import Update
from telegram.ext import (
    Application, CommandHandler, MessageHandler, ContextTypes, filters
)

BOT_TOKEN = os.environ.get("BOT_TOKEN")

app = Flask(__name__)

# --- HTTP healthcheck –¥–ª—è Render ---
@app.route("/")
def health():
    return "OK", 200

# --- Handlers Telegram ---
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø ¬´–°–∫–∞–Ω–µ—Ä –¥—É—à–∏¬ª. –Ø –Ω–∞ —Å–≤—è–∑–∏ –∏ –≥–æ—Ç–æ–≤ –æ—Ç–≤–µ—á–∞—Ç—å üåø"
    )

async def on_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (update.message.text or "").strip()
    if text.lower() in {"–ø—Ä–∏–≤–µ—Ç", "hi", "hello"}:
        await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç-–ø—Ä–∏–≤–µ—Ç! ‚ú®")
    else:
        await update.message.reply_text("–Ø —É—Å–ª—ã—à–∞–ª —Ç–µ–±—è. –ö–æ–º–∞–Ω–¥–∞: /start")

def run_bot():
    if not BOT_TOKEN:
        print("‚ùóBOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω. –ü—Ä–æ–≤–µ—Ä—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞ Render.")
        return
    app_ = Application.builder().token(BOT_TOKEN).build()
    app_.add_handler(CommandHandler("start", cmd_start))
    app_.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_text))
    # long-polling
    app_.run_polling(allowed_updates=Update.ALL_TYPES)

# –ó–∞–ø—É—Å–∫–∞–µ–º polling –≤ —Ñ–æ–Ω–µ, –∞ Flask –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è Render
_bot_started = False
@app.before_first_request
def activate_bot():
    global _bot_started
    if not _bot_started:
        t = threading.Thread(target=run_bot, daemon=True)
        t.start()
        _bot_started = True

if __name__ == "__main__":
    # –ª–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫
    port = int(os.environ.get("PORT", 10000))
    activate_bot()
    app.run(host="0.0.0.0", port=port)
